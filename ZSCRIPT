version "4.12"
#Include "UNMAKER.zsc"

/*
	DOOM has a ticrate of 1/35 (35 tics = 1 second)
	DOOM 64 has a ticrate of 1/30 (30 tics = 1 second)
	D = 1.1666 * D64 <-- we don't care about this but it's fun to have anyway
	D64 = 0.857142 * D <-- this is how we could convert DOOM tics to DOOM64 tics
	(If this message is here then I still haven't used these conversions and instead just eyeballed it)
*/

Class DoomPlayer64 : DoomPlayer
{
	uint8 UnmakerLevel;

	property DemonKeys: UnmakerLevel;

	Default
	{
		DoomPlayer64.DemonKeys 0;

		Player.DisplayName "EdwardBosco"; // Fun fact: Ed Bosco is the voice actor for both the Marauder and Doom Slayer in Doom Eternal! He's also Alastor from the Hazbin Hotel pilot...
		Player.StartItem "Pistol64";
		Player.StartItem "Fist64";
		Player.StartItem "Clip", 50;
		Player.WeaponSlot 1, "Fist64", "Chainsaw64", "Fist", "Chainsaw";
		Player.WeaponSlot 2, "Pistol64", "Pistol";
		Player.WeaponSlot 3, "Shotgun64", "SuperShotgun64", "Shotgun", "SuperShotgun";
		Player.WeaponSlot 4, "Chaingun64", "Chaingun";
		Player.WeaponSlot 5, "RocketLauncher64", "RocketLauncher";
		Player.WeaponSlot 6, "PlasmaRifle64", "PlasmaRifle";
		Player.WeaponSlot 7, "BFG900064", "BFG9000";
		Player.WeaponSlot 8, "Unmaker";
	}

	// Make sure the player never has more than 3 demon keys (or less than 0)
	override void HasReceived(Inventory item)
	{
		super.HasReceived(item);
		if (item && item.GetParentClass() == 'DemonKey')
		{
			UnmakerLevel = Clamp(UnmakerLevel += 1, 0, 3);
		}
	}
}

Class Fist64 : Fist
{
	/* DOOM64 Changed Stats
		Damage: 3-24 dmg
		Rate of Fire: 106 s/m
		Range: 80 u
	*/
	Default
	{
		Tag "Doom64 Fist";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_FIST";
	}

	States
	{
		Spawn:
			FSTT A -1;
			Stop;
		Ready:
			NPNG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NPNG A 1 A_Lower();
			Loop;
		Select:
			NPNG A 1 A_Raise();
			Loop;
		Fire:
			NPNG B 4;
			NPNG C 4 A_CustomPunch(3, flags: CPF_PULLIN, range: 80, MeleeSound: "weapons64/punch");
			NPNG D 6;
			NPNG C 4;
			NPNG B 6 A_ReFire();
			Goto Ready;
	}
}

Class Pistol64 : Pistol
{
	/* DOOM64 Changed Stats
		Damage: 4-16 dmg
		Rate of Fire: 164 s/m
	*/
	Default
	{
		Tag "Doom64 Pistol";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_PISTOL";
	}

	States
	{
		Ready:
			NPSG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NPSG A 1 A_Lower();
			Loop;
		Select:
			NPSG A 1 A_Raise();
			Loop;
		Fire:
			NPSG B 1
			{
				A_StartSound("weapons64/pistol", CHAN_WEAPON);
				A_GunFlash();
				A_FireBullets(5.6, 0, 1, 4 * Random(1, 4), flags: FBF_USEAMMO|FBF_NORANDOM);
				A_AlertMonsters();
			}
			NPSG B 6;
			NPSG C 6;
			NPSG C 1 A_ReFire();
			Goto Ready;
		Flash:
			NPSF A 2 Bright A_Light1;
			Goto LightDone;
		Spawn:
			NPST A -1;
			Stop;
	}
}

Class Chainsaw64 : Chainsaw
{
	/* DOOM64 Changed Stats
		Damage: 3-24 dmg
		Rate of Fire: 900 s/m
		Range: 81 u
	*/
	Default
	{
		Tag "Doom64 Chainsaw";
		Weapon.UpSound "weapons64/sawup";
		Weapon.ReadySound "weapons64/sawidle";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_CHAINSAW";
	}

	States
	{
		Ready:
			NSWG AB 4 A_WeaponReady();
			Loop;
		Deselect:
			NSWG A 1 A_Lower();
			Loop;
		Select:
			NSWG A 1 A_Raise();
			Loop;
		Fire:
			NSWG CD 2
			{
				A_Saw("weapons64/sawfull", "weapons64/sawhit", 3 * Random(1, 8), flags: SF_NORANDOM, range: 81);
			}
			NSWG D 1 A_ReFire();
			Goto Ready;
		Spawn:
			NSWT A -1;
			Stop;
	}
}

Class Shotgun64 : Shotgun
{
	/* DOOM64 Changed Stats
		Damage (per-pellet): 4-16 dmg
		Damage (max) 100 dmg
		Rate of Fire: 60 s/m
		Max Horizontal Pellet Spread: 5.6 deg
	*/
	Default
	{
		Tag "Doom64 Shotgun";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_SHOTGUN";
	}

	States
	{
		Ready:
			NSHG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NSHG A 1 A_Lower();
			Loop;
		Select:
			NSHG A 1 A_Raise();
			Loop;
		Fire:
			NSHG A 10
			{
				A_FireBullets(5.6, 0, 7, 4 * Random(1, 4), flags: FBF_USEAMMO|FBF_NORANDOM, range: 2048);
				A_StartSound("weapons64/shotgf", CHAN_WEAPON);
				A_GunFlash();
			}
			NSHG B 3;
			NSHG B 4;
			NSHG B 5;
			NSHG C 5;
			NSHG A 8;
			NSHG A 0 A_ReFire();
			Goto Ready;
		Flash:
			NSHF A 3 Bright A_Light1();
			Goto LightDone;
		Spawn:
			NSHT A -1;
			Stop;
	}
}

Class SuperShotgun64 : SuperShotgun
{
	/* DOOM64 Changed Stats
		Damage (max) 240 dmg (max damage is only different because of D64 making more rng calls, so it's not really necessary to replicate)
		Rate of Fire: 44 s/m
	*/
	Default
	{
		Tag "Doom64 SuperShotgun";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_SUPERSHOTGUN";
	}

	States
	{
		Ready:
			NSSG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NSSG A 1 A_Lower();
			Loop;
		Select:
			NSSG A 1 A_Raise();
			Loop;
		Fire:
			NSSG A 3;
			NSSG A 7
			{
				A_FireBullets(11.2, 7.1, 20, 4 * Random(1, 4), flags: FBF_USEAMMO|FBF_NORANDOM, range: 2048);
				A_StartSound("weapons64/sshotf", CHAN_WEAPON);
				A_GunFlash();
				A_Recoil(1);
			}
			NSSG B 14;
			NSSG B 13 A_CheckReload();
			NSSG C 5 A_StartSound("weapons64/sshoto", CHAN_WEAPON);
			NSSG C 1;
			NSSG A 2 A_StartSound("weapons64/sshotc", CHAN_WEAPON);
			NSSG A 1 A_ReFire();
			Goto Ready;
		Flash:
			NSSF A 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			NSST A -1;
			Stop;
	}
}

Class Chaingun64 : Chaingun
{
	/* DOOM64 Changed Stats
		Damage (per-bullet): 4-16 dmg
		Rate of Fire: 600 s/m
		---
		Because the chaingun fires two shots every time you fire once, each shot has
		to last the same amount of tics or else it'll feel stuttery and bad. This
		means that I was forced to choose between the chaingun being slightly slower
		or slightly faster than the actual DOOM64 chaingun. I chose slightly slower
		because while both are annoying (to me and probably nobody else), the DOOM64
		chaingun is already fast as FUCK on its own so it'll still be faster than
		the original chaingun.
	*/
	Default
	{
		Tag "Doom64 Chaingun";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_CHAINGUN";
	}

	States
	{
		Ready:
			NCHG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NCHG A 1 A_Lower();
			Loop;
		Select:
			NCHG A 1 A_Raise();
			Loop;
		Fire:
			NCHG A 0
			{
				A_StartSound("weapons64/chngun", CHAN_WEAPON);
				A_Overlay(PSP_FLASH, "Flash");
 				A_WeaponOffset(FRandom(-2, 2), FRandom(28, 32), WOF_INTERPOLATE);
			}
			NCHG A 2
			{
				A_FireBullets(5.6, 0, 1, 4 * Random(1, 4), flags: FBF_USEAMMO|FBF_NORANDOM, range: 2048);
				A_SetPitch(pitch - 1, SPF_INTERPOLATE);
			}
			NCHG A 2 A_SetPitch(pitch + 1, SPF_INTERPOLATE);
			NCHG B 0
			{
				A_StartSound("weapons64/chngun", CHAN_WEAPON);
				A_Overlay(PSP_FLASH, "Flash2");
 				A_WeaponOffset(FRandom(-2, 2), FRandom(32, 36), WOF_INTERPOLATE);
			}
			NCHG B 2
			{
				A_FireBullets(5.6, 0, 1, 4 * Random(1, 4), flags: FBF_USEAMMO|FBF_NORANDOM, range: 2048);
				A_SetPitch(pitch - 1, SPF_INTERPOLATE);
			}
			NCHG B 2 A_SetPitch(pitch + 1, SPF_INTERPOLATE);
			NCHG B 0 A_ReFire();
			Goto Ready;
		Flash:
			NCHF A 2 Bright A_Light1();
			Goto LightDone;
		Flash2:
			NCHF B 2 Bright A_Light2();
			Goto LightDone;
		Spawn:
			NCHT A -1;
			Stop;
	}
}

Class RocketLauncher64 : RocketLauncher
{
	/* DOOM64 Changed Stats
		Rate of Fire: 100 s/m (1.666+ s/s)
	*/
	Default
	{
		Tag "Doom64 RocketLauncher";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_ROCKETLAUNCHER";
	}

	States
	{
		Ready:
			NMSG A 1 A_WeaponReady();
			Loop;
		Deselect:
			NMSG A 1 A_Lower();
			Loop;
		Select:
			NMSG A 1 A_Raise();
			Loop;
		Fire:
			NMSG B 8 A_GunFlash();
			NMSG B 1
			{
				let r_rocket = A_FireProjectile("Rocket64");
 				r_rocket.A_Warp(AAPTR_DEFAULT, 30);
				A_Recoil(1.5);
			}
			NMSG B 1 A_SetPitch(pitch + 2, SPF_INTERPOLATE);
			NMSG B 2 A_SetPitch(pitch - 2, SPF_INTERPOLATE);
			NMSG B 10;
			NMSG B 0 A_ReFire();
			Goto Ready;
		Flash:
			NMSF A 3 Bright A_Light1();
			NMSF B 4 Bright;
			NMSF CD 4 Bright A_Light2();
			Goto LightDone;
		Spawn:
			NMST A -1;
			Stop;
	}
}

Class Rocket64 : Rocket
{
	/* DOOM64 Changed Stats
		Speed: 900 u/s
		----
		In Doom64, rockets and plasma balls spawn in front of the player (30 units and 40 units respectively).
		Now, I couldn't figure out how to offset the projectiles' spawns without re-writing the entire A_FireProjectile
		function, and to be perfectly frank with you, I would rather DIE than do that. My solution? I just make
		the projectiles invisible for a few tics when they spawn. Easy peasy.
	*/
	Default
	{
		Radius 11;
		Height 8;
		Speed 25.7;
		DamageFunction int(20 * frandom(1,4));
		SeeSound "weapons64/rocklf";
		DeathSound "weapons64/rocklx";
		-ROCKETTRAIL
		-ZDOOMTRANS
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto SpawnLoop;
		SpawnLoop:
			NMSL A 1 Bright A_SpawnItemEx("Rocket64SmokeTrail");
			NMSL A 2 Bright;
			Loop;
		Death:
			NMSL B 4 Bright
			{
				A_Explode();
				A_SpawnItemEx("Rocket64Explosion", 1);
			}
			NMSL C 4 Bright;
			NMSL D 3 Bright;
			NMSL E 3;
			NMSL F 4;
			Stop;
		BrainExplode:
			NMSL BC 10 Bright;
			NMSL D 10 A_BrainExplode();
			Stop;
	}
}

Class Rocket64Explosion : Actor
{
	/*
		The DOOM64 rocket explosions use two layered and animated sprites
		The only way that I found to replicate that was by creating this actor
		and spawning it behind the rocket when it explodes.
	*/
	Default
	{
		Gravity 0;
	}

	States
	{
		Spawn:
			NMEX AB 4 Bright A_Light(2);
			NMEX C 3 Bright A_Light(1);
			NMEX D 3;
			NMEX E 4;
			Stop;
	}
}

Class Rocket64SmokeTrail : RocketSmokeTrail
{
	Default
	{
		VSpeed 0;
	}

	States
	{
		Spawn:
			NSMK ABCDE 4;
			Stop;
	}
}

Class PlasmaRifle64 : PlasmaRifle
{
	/* DOOM64 Changed Stats
		Rate of Fire: 450 s/m (7.5 s/s)
	*/
	Default
	{
		Tag "Doom64 PlasmaRifle";
		Inventory.PickupSound "inventory/weapons64/up";
		Weapon.ReadySound "weapons64/plasmafuckingannoying";
		Inventory.PickupMessage "$D64_PICKUP_PLASMARIFLE";
	}

	States
	{
		Ready:
			NPRG A 6
			{
				A_WeaponReady();
 				A_Overlay(2, "Buzz");
 				if(doom64_plasma_rifle_annoying) { A_StartSound("weapons64/plasmafuckingannoying", CHAN_WEAPON, CHANF_LOOPING); }
 				else { A_StopSound(CHAN_WEAPON); }
			}
			Loop;
		Deselect:
 			NPRG A 0 A_StopSound(CHAN_WEAPON);
			NPRG A 1 A_Lower;
			Loop;
		Select:
			NPRG A 1 A_Raise;
			Loop;
		Fire:
			NPRG A 0 A_Jump(127, "Fire2");
			NPRG A 4
			{
				A_FireProjectile("PlasmaBall64");
				A_Overlay(PSP_FLASH, "Flash");
			}
			NPRG A 4 A_ReFire;
			Goto Ready;
		Fire2:
			NPRG A 5
			{
				A_FireProjectile("PlasmaBall64");
				A_Overlay(PSP_FLASH, "Flash");
			}
			NPRG A 5 A_ReFire;
			Goto Ready;
		Flash:
			NPRF A 2 Bright A_Light1;
			Goto LightDone;
		Spawn:
			NPRT A -1;
			Stop;
		Buzz:
			NPRF BCD 2;
			Loop;
	}
}

Class PlasmaBall64 : PlasmaBall
{
	/* DOOM64 Changed Stats
		Speed: 700 u/s
		----
		See the Rocket64 class for info on how I implement the horizontal spawn offset
	*/
	Default
	{
		Speed 20;
		SeeSound "weapons64/plasmaf";
		DeathSound "weapons64/plasmax";
	}

	States
	{
		Spawn:
			TNT1 A 2;
			Goto SpawnLoop;
		SpawnLoop:
			NPLB AB 3 Bright A_Light1;
			Loop;
		Death:
			NPLE ABCDEF 1 Bright A_Light2;
			Stop;
	}
}

Class BFG900064 : BFG9000
{
	/* DOOM64 Changed Stats
		Rate of Fire: 45 s/m (0.75 s/s)
		Tracer Vertical AutoAim: 69 deg (yes, I'm not kidding)
		Charge Time Before Firing: 1 sec
		Wait Time After Hit Before Tracers Fire: 466 ms

		Tracers' graphic appears at the center of the target, not the bottom
	*/
	Default
	{
		Tag "Doom64 BFG9000";
		Inventory.PickupSound "inventory/weapons64/up";
		Inventory.PickupMessage "$D64_PICKUP_BFG";
	}

	States
	{
		Ready:
			NBFG A 1 A_WeaponReady;
			Loop;
		Deselect:
			NBFG A 1 A_Lower;
			Loop;
		Select:
			NBFG A 1 A_Raise;
			Loop;
		Fire:
			NBFG A 20 A_StartSound("weapons64/bfgf", CHAN_WEAPON);
			NBFG B 10 A_Overlay(PSP_FLASH, "Flash");
			NBFG B 10 A_FireProjectile("BFGBall64", 0, true);
			NBFG B 20 A_ReFire;
			Goto Ready;
		Flash:
			NBFF A 6 Bright A_Light1;
			NBFF B 5 Bright A_Light1;
			NBFF C 6 Bright A_Light2;
			Goto LightDone;
		Spawn:
			NBFT A -1;
			Stop;
	}
}

Class BFGBall64 : BFGBall
{
	/* DOOM64 Changed Stats
		Speed: 700 u/s
		----
		See the Rocket64 class for info on how I implement the horizontal spawn offset
	*/
	Default
	{
		Speed 20;
		DeathSound "weapons64/bfgx";
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Goto SpawnLoop;
		SpawnLoop:
			NBFB AB 4 Bright;
			Loop;
		Death:
			NBFE AB 8 Bright;
			NBFE C 8 Bright A_BFGSpray64;
			NBFE DEF 8 Bright;
			Stop;
	}

	// In Doom 64, the BFG tracers spawn at the center of the enemy instead of at their feet.
	// I think it's easiest to just override the A_BFGSpray function with a duplicate of it that
	// changes that one value (since the call to spawn and kill the tracers happens in a nested statement)
	action void A_BFGSpray64(class<Actor> spraytype = "BFGExtra64", int numrays = 40, int damagecnt = 15, double ang = 90, double distance = 16*64, double vrange = 32, int defdamage = 0, int flags = 0)
	{
		int damage;
		FTranslatedLineTarget t;

		if (spraytype == null) spraytype = "BFGExtra64";
		if (numrays <= 0) numrays = 40;
		if (damagecnt <= 0) damagecnt = 15;
		if (ang == 0) ang = 90.;
		if (distance <= 0) distance = 16 * 64;
		if (vrange == 0) vrange = 32.;

		if (!target) return;

		Actor originator = (flags & BFGF_MISSILEORIGIN) ? self : target;

		for (int i = 0; i < numrays; i++)
		{
			double an = angle - ang / 2 + ang / numrays*i;

			originator.AimLineAttack(an, distance, t, vrange);

			if (t.linetarget != null)
			{
				Actor spray = Spawn(spraytype, t.linetarget.pos + (0, 0, t.linetarget.Height / 2), ALLOW_REPLACE); // This is the part I'm changing

				int dmgFlags = 0;
				Name dmgType = 'BFGSplash';

				if (spray != null)
				{
					if ((spray.bMThruSpecies && target.GetSpecies() == t.linetarget.GetSpecies()) ||
						(!(flags & BFGF_HURTSOURCE) && target == t.linetarget))
					{
						spray.Destroy();
						continue;
					}
					if (spray.bPuffGetsOwner) spray.target = target;
					if (spray.bFoilInvul) dmgFlags |= DMG_FOILINVUL;
					if (spray.bFoilBuddha) dmgFlags |= DMG_FOILBUDDHA;
					dmgType = spray.DamageType;
				}

				if (defdamage == 0)
				{
					damage = 0;
					for (int j = 0; j < damagecnt; ++j)
						damage += Random[BFGSpray](1, 8);
				}
				else
				{
					damage = defdamage;
				}

				int newdam = t.linetarget.DamageMobj(originator, target, damage, dmgType, dmgFlags|DMG_USEANGLE, t.angleFromSource);
				t.TraceBleed(newdam > 0 ? newdam : damage, self);
			}
		}
	}
}

Class BFGExtra64 : BFGExtra
{
	States
	{
		Spawn:
			NBFZ ABCDEF 4 Bright;
			Stop;
	}
}

Class DemonKey : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 3;
		Inventory.PickupSound "misc/i_pkup_64";
	}
}

Class DemonKeyOrange : DemonKey
{
	Default
	{
		Tag "Doom64 Demon Key (Orange)";
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "$D64_PICKUP_DEMONKEY_1";
	}

	States
	{
		Spawn:
			DEKO ABCDEDCB 4;
			Loop;
	}
}

Class DemonKeyPurple : DemonKey
{
	Default
	{
		Tag "Doom64 Demon Key (Purple)";
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "$D64_PICKUP_DEMONKEY_2";
	}

	States
	{
		Spawn:
			DEKP ABCDEDCB 4;
			Loop;
	}
}

Class DemonKeyCyan : DemonKey
{
	Default
	{
		Tag "Doom64 Demon Key (Cyan)";
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "$D64_PICKUP_DEMONKEY_3";
	}

	States
	{
		Spawn:
			DEKC ABCDEDCB 4;
			Loop;
	}
}

/*
	This fucking EventHandler is so fucking inefficient and bad and sloppy...
	but it works, so I'll fix it later (ha! watch this never change...)
*/
Class Doom64Handler : EventHandler
{
	static const String classic_names[] =
	{
		"Fist",
		"Pistol",
		"Chainsaw",
		"Shotgun",
		"SuperShotgun",
		"Chaingun",
		"RocketLauncher",
		"PlasmaRifle",
		"BFG9000",
		"Rocket",
		"RocketSmokeTrail",
		"PlasmaBall",
		"BFGBall",
		"BFGExtra"
	};

	static const String doom64_names[] =
	{
		"Fist64",
		"Pistol64",
		"Chainsaw64",
		"Shotgun64",
		"SuperShotgun64",
		"Chaingun64",
		"RocketLauncher64",
		"PlasmaRifle64",
		"BFG900064",
		"Rocket64",
		"Rocket64SmokeTrail",
		"PlasmaBall64",
		"BFGBall64",
		"BFGExtra64"
	};

	override void CheckReplacement(ReplaceEvent replace_event)
	{
		if(!doom64_replace)
		{
			return;
		}

		for(let i = 0 ; i < classic_names.Size() ; i++)
		{
			if(replace_event.Replacee.GetClassName() == classic_names[i])
			{
				replace_event.Replacement = doom64_names[i];
			}
		}
	}

	/*
		!!TERRIBLE FUCKING HACK TO SWAP WEAPONS!!

		Hypothetical better code would be something like storing all the names in one Array
		and iterating with only one for loop and an offset or something else entirely
	*/
	void ReplaceNow(Actor c_player)
	{
		if(doom64_replace)
		{
			for(let i = 0 ; i < classic_names.Size() ; i++)
			{
				int item_amount = c_player.CountInv(classic_names[i]);

				if(item_amount > 0)
				{
					c_player.GiveInventory(doom64_names[i], item_amount);
					c_player.TakeInventory(classic_names[i], item_amount);
				}
			}
		}

		else
		{
			for(let i = 0 ; i < classic_names.Size() ; i++)
			{
				int item_amount = c_player.CountInv(doom64_names[i]);

				if(item_amount > 0)
				{
					c_player.GiveInventory(classic_names[i], item_amount);
					c_player.TakeInventory(doom64_names[i], item_amount);
				}
			}
		}
	}

	override void PlayerSpawned(PlayerEvent player_event)
	{
		PlayerPawn c_player = players[player_event.PlayerNumber].mo;

		if(c_player)
		{
			ReplaceNow(c_player);
		}
	}

	override void NetworkProcess(ConsoleEvent console_event)
	{
		PlayerPawn c_player = players[consoleplayer].mo;

		if(c_player)
		{
			ReplaceNow(c_player);
		}
	}
}

Class WeaponReplacerHandler : CustomBoolCVar
{
	override bool ModifyValue(Name CVarName, bool val)
	{
		Doom64Handler.SendNetworkEvent("doom64_replace_changed", doom64_replace);
		return val;
	}
}